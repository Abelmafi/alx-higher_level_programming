============================
The ``0-add_integer`` module
============================

this mof=dule defines intiger sum function ``add_intiger(a, b=98)``

Usage
=====

```add_integer(...)``` add and return two numbers a and b.:

::
	>>> add_integer = __import__('0-add_integer').add_integer

::
	>>> add_integer(1, 2)
	3

::

	>>> add_integer(1.3, 2.3)
	3

::

	>>> add_integer(-1.2, -2)
	-3

::

	>>> add_integer(2.3, -0.4)
	2

::

	>>> add_integer(3)
	101

Raise-Errors
============

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

::

	>>> add_integer(3, "hello")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

:

	>>> add_integer(None)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

::

	>>> add_integer(3, None)
	Traceback (most recent call last):
        ...
        TypeError: b must be an integer

::

	>>> add_integer("hello", "there")
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

The function will fail if infinity is provided.

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer
     

::

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
